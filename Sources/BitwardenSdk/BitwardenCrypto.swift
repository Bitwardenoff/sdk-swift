// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

// swiftlint:disable all
import Foundation

// Depending on the consumer's build setup, the low-level FFI code
// might be in a separate module, or it might be compiled inline into
// this module. This is a bit of light hackery to work with both.
#if canImport(BitwardenCryptoFFI)
import BitwardenCryptoFFI
#endif

fileprivate extension RustBuffer {
    // Allocate a new buffer, copying the contents of a `UInt8` array.
    init(bytes: [UInt8]) {
        let rbuf = bytes.withUnsafeBufferPointer { ptr in
            RustBuffer.from(ptr)
        }
        self.init(capacity: rbuf.capacity, len: rbuf.len, data: rbuf.data)
    }

    static func empty() -> RustBuffer {
        RustBuffer(capacity: 0, len:0, data: nil)
    }

    static func from(_ ptr: UnsafeBufferPointer<UInt8>) -> RustBuffer {
        try! rustCall { ffi_bitwarden_crypto_rustbuffer_from_bytes(ForeignBytes(bufferPointer: ptr), $0) }
    }

    // Frees the buffer in place.
    // The buffer must not be used after this is called.
    func deallocate() {
        try! rustCall { ffi_bitwarden_crypto_rustbuffer_free(self, $0) }
    }
}

fileprivate extension ForeignBytes {
    init(bufferPointer: UnsafeBufferPointer<UInt8>) {
        self.init(len: Int32(bufferPointer.count), data: bufferPointer.baseAddress)
    }
}

// For every type used in the interface, we provide helper methods for conveniently
// lifting and lowering that type from C-compatible data, and for reading and writing
// values of that type in a buffer.

// Helper classes/extensions that don't change.
// Someday, this will be in a library of its own.

fileprivate extension Data {
    init(rustBuffer: RustBuffer) {
        // TODO: This copies the buffer. Can we read directly from a
        // Rust buffer?
        self.init(bytes: rustBuffer.data!, count: Int(rustBuffer.len))
    }
}

// Define reader functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.
//
// With external types, one swift source file needs to be able to call the read
// method on another source file's FfiConverter, but then what visibility
// should Reader have?
// - If Reader is fileprivate, then this means the read() must also
//   be fileprivate, which doesn't work with external types.
// - If Reader is internal/public, we'll get compile errors since both source
//   files will try define the same type.
//
// Instead, the read() method and these helper functions input a tuple of data

fileprivate func createReader(data: Data) -> (data: Data, offset: Data.Index) {
    (data: data, offset: 0)
}

// Reads an integer at the current offset, in big-endian order, and advances
// the offset on success. Throws if reading the integer would move the
// offset past the end of the buffer.
fileprivate func readInt<T: FixedWidthInteger>(_ reader: inout (data: Data, offset: Data.Index)) throws -> T {
    let range = reader.offset..<reader.offset + MemoryLayout<T>.size
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    if T.self == UInt8.self {
        let value = reader.data[reader.offset]
        reader.offset += 1
        return value as! T
    }
    var value: T = 0
    let _ = withUnsafeMutableBytes(of: &value, { reader.data.copyBytes(to: $0, from: range)})
    reader.offset = range.upperBound
    return value.bigEndian
}

// Reads an arbitrary number of bytes, to be used to read
// raw bytes, this is useful when lifting strings
fileprivate func readBytes(_ reader: inout (data: Data, offset: Data.Index), count: Int) throws -> Array<UInt8> {
    let range = reader.offset..<(reader.offset+count)
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    var value = [UInt8](repeating: 0, count: count)
    value.withUnsafeMutableBufferPointer({ buffer in
        reader.data.copyBytes(to: buffer, from: range)
    })
    reader.offset = range.upperBound
    return value
}

// Reads a float at the current offset.
fileprivate func readFloat(_ reader: inout (data: Data, offset: Data.Index)) throws -> Float {
    return Float(bitPattern: try readInt(&reader))
}

// Reads a float at the current offset.
fileprivate func readDouble(_ reader: inout (data: Data, offset: Data.Index)) throws -> Double {
    return Double(bitPattern: try readInt(&reader))
}

// Indicates if the offset has reached the end of the buffer.
fileprivate func hasRemaining(_ reader: (data: Data, offset: Data.Index)) -> Bool {
    return reader.offset < reader.data.count
}

// Define writer functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.  See the above discussion on Readers for details.

fileprivate func createWriter() -> [UInt8] {
    return []
}

fileprivate func writeBytes<S>(_ writer: inout [UInt8], _ byteArr: S) where S: Sequence, S.Element == UInt8 {
    writer.append(contentsOf: byteArr)
}

// Writes an integer in big-endian order.
//
// Warning: make sure what you are trying to write
// is in the correct type!
fileprivate func writeInt<T: FixedWidthInteger>(_ writer: inout [UInt8], _ value: T) {
    var value = value.bigEndian
    withUnsafeBytes(of: &value) { writer.append(contentsOf: $0) }
}

fileprivate func writeFloat(_ writer: inout [UInt8], _ value: Float) {
    writeInt(&writer, value.bitPattern)
}

fileprivate func writeDouble(_ writer: inout [UInt8], _ value: Double) {
    writeInt(&writer, value.bitPattern)
}

// Protocol for types that transfer other types across the FFI. This is
// analogous go the Rust trait of the same name.
fileprivate protocol FfiConverter {
    associatedtype FfiType
    associatedtype SwiftType

    static func lift(_ value: FfiType) throws -> SwiftType
    static func lower(_ value: SwiftType) -> FfiType
    static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType
    static func write(_ value: SwiftType, into buf: inout [UInt8])
}

// Types conforming to `Primitive` pass themselves directly over the FFI.
fileprivate protocol FfiConverterPrimitive: FfiConverter where FfiType == SwiftType { }

extension FfiConverterPrimitive {
    public static func lift(_ value: FfiType) throws -> SwiftType {
        return value
    }

    public static func lower(_ value: SwiftType) -> FfiType {
        return value
    }
}

// Types conforming to `FfiConverterRustBuffer` lift and lower into a `RustBuffer`.
// Used for complex types where it's hard to write a custom lift/lower.
fileprivate protocol FfiConverterRustBuffer: FfiConverter where FfiType == RustBuffer {}

extension FfiConverterRustBuffer {
    public static func lift(_ buf: RustBuffer) throws -> SwiftType {
        var reader = createReader(data: Data(rustBuffer: buf))
        let value = try read(from: &reader)
        if hasRemaining(reader) {
            throw UniffiInternalError.incompleteData
        }
        buf.deallocate()
        return value
    }

    public static func lower(_ value: SwiftType) -> RustBuffer {
          var writer = createWriter()
          write(value, into: &writer)
          return RustBuffer(bytes: writer)
    }
}
// An error type for FFI errors. These errors occur at the UniFFI level, not
// the library level.
fileprivate enum UniffiInternalError: LocalizedError {
    case bufferOverflow
    case incompleteData
    case unexpectedOptionalTag
    case unexpectedEnumCase
    case unexpectedNullPointer
    case unexpectedRustCallStatusCode
    case unexpectedRustCallError
    case unexpectedStaleHandle
    case rustPanic(_ message: String)

    public var errorDescription: String? {
        switch self {
        case .bufferOverflow: return "Reading the requested value would read past the end of the buffer"
        case .incompleteData: return "The buffer still has data after lifting its containing value"
        case .unexpectedOptionalTag: return "Unexpected optional tag; should be 0 or 1"
        case .unexpectedEnumCase: return "Raw enum value doesn't match any cases"
        case .unexpectedNullPointer: return "Raw pointer value was null"
        case .unexpectedRustCallStatusCode: return "Unexpected RustCallStatus code"
        case .unexpectedRustCallError: return "CALL_ERROR but no errorClass specified"
        case .unexpectedStaleHandle: return "The object in the handle map has been dropped already"
        case let .rustPanic(message): return message
        }
    }
}

fileprivate extension NSLock {
    func withLock<T>(f: () throws -> T) rethrows -> T {
        self.lock()
        defer { self.unlock() }
        return try f()
    }
}

fileprivate let CALL_SUCCESS: Int8 = 0
fileprivate let CALL_ERROR: Int8 = 1
fileprivate let CALL_UNEXPECTED_ERROR: Int8 = 2
fileprivate let CALL_CANCELLED: Int8 = 3

fileprivate extension RustCallStatus {
    init() {
        self.init(
            code: CALL_SUCCESS,
            errorBuf: RustBuffer.init(
                capacity: 0,
                len: 0,
                data: nil
            )
        )
    }
}

private func rustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: nil)
}

private func rustCallWithError<T>(
    _ errorHandler: @escaping (RustBuffer) throws -> Error,
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: errorHandler)
}

private func makeRustCall<T>(
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T,
    errorHandler: ((RustBuffer) throws -> Error)?
) throws -> T {
    uniffiEnsureInitialized()
    var callStatus = RustCallStatus.init()
    let returnedVal = callback(&callStatus)
    try uniffiCheckCallStatus(callStatus: callStatus, errorHandler: errorHandler)
    return returnedVal
}

private func uniffiCheckCallStatus(
    callStatus: RustCallStatus,
    errorHandler: ((RustBuffer) throws -> Error)?
) throws {
    switch callStatus.code {
        case CALL_SUCCESS:
            return

        case CALL_ERROR:
            if let errorHandler = errorHandler {
                throw try errorHandler(callStatus.errorBuf)
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.unexpectedRustCallError
            }

        case CALL_UNEXPECTED_ERROR:
            // When the rust code sees a panic, it tries to construct a RustBuffer
            // with the message.  But if that code panics, then it just sends back
            // an empty buffer.
            if callStatus.errorBuf.len > 0 {
                throw UniffiInternalError.rustPanic(try FfiConverterString.lift(callStatus.errorBuf))
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.rustPanic("Rust panic")
            }

        case CALL_CANCELLED:
            fatalError("Cancellation not supported yet")

        default:
            throw UniffiInternalError.unexpectedRustCallStatusCode
    }
}

private func uniffiTraitInterfaceCall<T>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> ()
) {
    do {
        try writeReturn(makeCall())
    } catch let error {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}

private func uniffiTraitInterfaceCallWithError<T, E>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> (),
    lowerError: (E) -> RustBuffer
) {
    do {
        try writeReturn(makeCall())
    } catch let error as E {
        callStatus.pointee.code = CALL_ERROR
        callStatus.pointee.errorBuf = lowerError(error)
    } catch {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}
fileprivate class UniffiHandleMap<T> {
    private var map: [UInt64: T] = [:]
    private let lock = NSLock()
    private var currentHandle: UInt64 = 1

    func insert(obj: T) -> UInt64 {
        lock.withLock {
            let handle = currentHandle
            currentHandle += 1
            map[handle] = obj
            return handle
        }
    }

     func get(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map[handle] else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

    @discardableResult
    func remove(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map.removeValue(forKey: handle) else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

    var count: Int {
        get {
            map.count
        }
    }
}


// Public interface members begin here.


fileprivate struct FfiConverterUInt32: FfiConverterPrimitive {
    typealias FfiType = UInt32
    typealias SwiftType = UInt32

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt32 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

fileprivate struct FfiConverterString: FfiConverter {
    typealias SwiftType = String
    typealias FfiType = RustBuffer

    public static func lift(_ value: RustBuffer) throws -> String {
        defer {
            value.deallocate()
        }
        if value.data == nil {
            return String()
        }
        let bytes = UnsafeBufferPointer<UInt8>(start: value.data!, count: Int(value.len))
        return String(bytes: bytes, encoding: String.Encoding.utf8)!
    }

    public static func lower(_ value: String) -> RustBuffer {
        return value.utf8CString.withUnsafeBufferPointer { ptr in
            // The swift string gives us int8_t, we want uint8_t.
            ptr.withMemoryRebound(to: UInt8.self) { ptr in
                // The swift string gives us a trailing null byte, we don't want it.
                let buf = UnsafeBufferPointer(rebasing: ptr.prefix(upTo: ptr.count - 1))
                return RustBuffer.from(buf)
            }
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> String {
        let len: Int32 = try readInt(&buf)
        return String(bytes: try readBytes(&buf, count: Int(len)), encoding: String.Encoding.utf8)!
    }

    public static func write(_ value: String, into buf: inout [UInt8]) {
        let len = Int32(value.utf8.count)
        writeInt(&buf, len)
        writeBytes(&buf, value.utf8)
    }
}


/**
 * RSA Key Pair
 *
 * Consists of a public key and an encrypted private key.
 */
public struct RsaKeyPair {
    /**
     * Base64 encoded DER representation of the public key
     */
    public let `public`: String
    /**
     * Encrypted PKCS8 private key
     */
    public let `private`: EncString

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * Base64 encoded DER representation of the public key
         */`public`: String, 
        /**
         * Encrypted PKCS8 private key
         */`private`: EncString) {
        self.`public` = `public`
        self.`private` = `private`
    }
}



extension RsaKeyPair: Equatable, Hashable {
    public static func ==(lhs: RsaKeyPair, rhs: RsaKeyPair) -> Bool {
        if lhs.`public` != rhs.`public` {
            return false
        }
        if lhs.`private` != rhs.`private` {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(`public`)
        hasher.combine(`private`)
    }
}


public struct FfiConverterTypeRsaKeyPair: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> RsaKeyPair {
        return
            try RsaKeyPair(
                public: FfiConverterString.read(from: &buf), 
                private: FfiConverterTypeEncString.read(from: &buf)
        )
    }

    public static func write(_ value: RsaKeyPair, into buf: inout [UInt8]) {
        FfiConverterString.write(value.`public`, into: &buf)
        FfiConverterTypeEncString.write(value.`private`, into: &buf)
    }
}


public func FfiConverterTypeRsaKeyPair_lift(_ buf: RustBuffer) throws -> RsaKeyPair {
    return try FfiConverterTypeRsaKeyPair.lift(buf)
}

public func FfiConverterTypeRsaKeyPair_lower(_ value: RsaKeyPair) -> RustBuffer {
    return FfiConverterTypeRsaKeyPair.lower(value)
}


public struct TrustDeviceResponse {
    /**
     * Base64 encoded device key
     */
    public let deviceKey: String
    /**
     * UserKey encrypted with DevicePublicKey
     */
    public let protectedUserKey: AsymmetricEncString
    /**
     * DevicePrivateKey encrypted with [DeviceKey]
     */
    public let protectedDevicePrivateKey: EncString
    /**
     * DevicePublicKey encrypted with [UserKey](super::UserKey)
     */
    public let protectedDevicePublicKey: EncString

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * Base64 encoded device key
         */deviceKey: String, 
        /**
         * UserKey encrypted with DevicePublicKey
         */protectedUserKey: AsymmetricEncString, 
        /**
         * DevicePrivateKey encrypted with [DeviceKey]
         */protectedDevicePrivateKey: EncString, 
        /**
         * DevicePublicKey encrypted with [UserKey](super::UserKey)
         */protectedDevicePublicKey: EncString) {
        self.deviceKey = deviceKey
        self.protectedUserKey = protectedUserKey
        self.protectedDevicePrivateKey = protectedDevicePrivateKey
        self.protectedDevicePublicKey = protectedDevicePublicKey
    }
}



extension TrustDeviceResponse: Equatable, Hashable {
    public static func ==(lhs: TrustDeviceResponse, rhs: TrustDeviceResponse) -> Bool {
        if lhs.deviceKey != rhs.deviceKey {
            return false
        }
        if lhs.protectedUserKey != rhs.protectedUserKey {
            return false
        }
        if lhs.protectedDevicePrivateKey != rhs.protectedDevicePrivateKey {
            return false
        }
        if lhs.protectedDevicePublicKey != rhs.protectedDevicePublicKey {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(deviceKey)
        hasher.combine(protectedUserKey)
        hasher.combine(protectedDevicePrivateKey)
        hasher.combine(protectedDevicePublicKey)
    }
}


public struct FfiConverterTypeTrustDeviceResponse: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> TrustDeviceResponse {
        return
            try TrustDeviceResponse(
                deviceKey: FfiConverterString.read(from: &buf), 
                protectedUserKey: FfiConverterTypeAsymmetricEncString.read(from: &buf), 
                protectedDevicePrivateKey: FfiConverterTypeEncString.read(from: &buf), 
                protectedDevicePublicKey: FfiConverterTypeEncString.read(from: &buf)
        )
    }

    public static func write(_ value: TrustDeviceResponse, into buf: inout [UInt8]) {
        FfiConverterString.write(value.deviceKey, into: &buf)
        FfiConverterTypeAsymmetricEncString.write(value.protectedUserKey, into: &buf)
        FfiConverterTypeEncString.write(value.protectedDevicePrivateKey, into: &buf)
        FfiConverterTypeEncString.write(value.protectedDevicePublicKey, into: &buf)
    }
}


public func FfiConverterTypeTrustDeviceResponse_lift(_ buf: RustBuffer) throws -> TrustDeviceResponse {
    return try FfiConverterTypeTrustDeviceResponse.lift(buf)
}

public func FfiConverterTypeTrustDeviceResponse_lower(_ value: TrustDeviceResponse) -> RustBuffer {
    return FfiConverterTypeTrustDeviceResponse.lower(value)
}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum HashPurpose {
    
    case serverAuthorization
    case localAuthorization
}


public struct FfiConverterTypeHashPurpose: FfiConverterRustBuffer {
    typealias SwiftType = HashPurpose

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> HashPurpose {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .serverAuthorization
        
        case 2: return .localAuthorization
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: HashPurpose, into buf: inout [UInt8]) {
        switch value {
        
        
        case .serverAuthorization:
            writeInt(&buf, Int32(1))
        
        
        case .localAuthorization:
            writeInt(&buf, Int32(2))
        
        }
    }
}


public func FfiConverterTypeHashPurpose_lift(_ buf: RustBuffer) throws -> HashPurpose {
    return try FfiConverterTypeHashPurpose.lift(buf)
}

public func FfiConverterTypeHashPurpose_lower(_ value: HashPurpose) -> RustBuffer {
    return FfiConverterTypeHashPurpose.lower(value)
}



extension HashPurpose: Equatable, Hashable {}



// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
/**
 * Key Derivation Function for Bitwarden Account
 *
 * In Bitwarden accounts can use multiple KDFs to derive their master key from their password. This
 * Enum represents all the possible KDFs.
 */

public enum Kdf {
    
    case pbkdf2(iterations: NonZeroU32
    )
    case argon2id(iterations: NonZeroU32, memory: NonZeroU32, parallelism: NonZeroU32
    )
}


public struct FfiConverterTypeKdf: FfiConverterRustBuffer {
    typealias SwiftType = Kdf

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Kdf {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .pbkdf2(iterations: try FfiConverterTypeNonZeroU32.read(from: &buf)
        )
        
        case 2: return .argon2id(iterations: try FfiConverterTypeNonZeroU32.read(from: &buf), memory: try FfiConverterTypeNonZeroU32.read(from: &buf), parallelism: try FfiConverterTypeNonZeroU32.read(from: &buf)
        )
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: Kdf, into buf: inout [UInt8]) {
        switch value {
        
        
        case let .pbkdf2(iterations):
            writeInt(&buf, Int32(1))
            FfiConverterTypeNonZeroU32.write(iterations, into: &buf)
            
        
        case let .argon2id(iterations,memory,parallelism):
            writeInt(&buf, Int32(2))
            FfiConverterTypeNonZeroU32.write(iterations, into: &buf)
            FfiConverterTypeNonZeroU32.write(memory, into: &buf)
            FfiConverterTypeNonZeroU32.write(parallelism, into: &buf)
            
        }
    }
}


public func FfiConverterTypeKdf_lift(_ buf: RustBuffer) throws -> Kdf {
    return try FfiConverterTypeKdf.lift(buf)
}

public func FfiConverterTypeKdf_lower(_ value: Kdf) -> RustBuffer {
    return FfiConverterTypeKdf.lower(value)
}



extension Kdf: Equatable, Hashable {}




/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias AsymmetricEncString = String
public struct FfiConverterTypeAsymmetricEncString: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AsymmetricEncString {
        return try FfiConverterString.read(from: &buf)
    }

    public static func write(_ value: AsymmetricEncString, into buf: inout [UInt8]) {
        return FfiConverterString.write(value, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> AsymmetricEncString {
        return try FfiConverterString.lift(value)
    }

    public static func lower(_ value: AsymmetricEncString) -> RustBuffer {
        return FfiConverterString.lower(value)
    }
}


public func FfiConverterTypeAsymmetricEncString_lift(_ value: RustBuffer) throws -> AsymmetricEncString {
    return try FfiConverterTypeAsymmetricEncString.lift(value)
}

public func FfiConverterTypeAsymmetricEncString_lower(_ value: AsymmetricEncString) -> RustBuffer {
    return FfiConverterTypeAsymmetricEncString.lower(value)
}



/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias EncString = String
public struct FfiConverterTypeEncString: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> EncString {
        return try FfiConverterString.read(from: &buf)
    }

    public static func write(_ value: EncString, into buf: inout [UInt8]) {
        return FfiConverterString.write(value, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> EncString {
        return try FfiConverterString.lift(value)
    }

    public static func lower(_ value: EncString) -> RustBuffer {
        return FfiConverterString.lower(value)
    }
}


public func FfiConverterTypeEncString_lift(_ value: RustBuffer) throws -> EncString {
    return try FfiConverterTypeEncString.lift(value)
}

public func FfiConverterTypeEncString_lower(_ value: EncString) -> RustBuffer {
    return FfiConverterTypeEncString.lower(value)
}



/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias NonZeroU32 = UInt32
public struct FfiConverterTypeNonZeroU32: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> NonZeroU32 {
        return try FfiConverterUInt32.read(from: &buf)
    }

    public static func write(_ value: NonZeroU32, into buf: inout [UInt8]) {
        return FfiConverterUInt32.write(value, into: &buf)
    }

    public static func lift(_ value: UInt32) throws -> NonZeroU32 {
        return try FfiConverterUInt32.lift(value)
    }

    public static func lower(_ value: NonZeroU32) -> UInt32 {
        return FfiConverterUInt32.lower(value)
    }
}


public func FfiConverterTypeNonZeroU32_lift(_ value: UInt32) throws -> NonZeroU32 {
    return try FfiConverterTypeNonZeroU32.lift(value)
}

public func FfiConverterTypeNonZeroU32_lower(_ value: NonZeroU32) -> UInt32 {
    return FfiConverterTypeNonZeroU32.lower(value)
}


private enum InitializationResult {
    case ok
    case contractVersionMismatch
    case apiChecksumMismatch
}
// Use a global variables to perform the versioning checks. Swift ensures that
// the code inside is only computed once.
private var initializationResult: InitializationResult {
    // Get the bindings contract version from our ComponentInterface
    let bindings_contract_version = 26
    // Get the scaffolding contract version by calling the into the dylib
    let scaffolding_contract_version = ffi_bitwarden_crypto_uniffi_contract_version()
    if bindings_contract_version != scaffolding_contract_version {
        return InitializationResult.contractVersionMismatch
    }

    return InitializationResult.ok
}

private func uniffiEnsureInitialized() {
    switch initializationResult {
    case .ok:
        break
    case .contractVersionMismatch:
        fatalError("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    case .apiChecksumMismatch:
        fatalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}

// swiftlint:enable all