// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

// swiftlint:disable all
import Foundation

// Depending on the consumer's build setup, the low-level FFI code
// might be in a separate module, or it might be compiled inline into
// this module. This is a bit of light hackery to work with both.
#if canImport(BitwardenFidoFFI)
import BitwardenFidoFFI
#endif

fileprivate extension RustBuffer {
    // Allocate a new buffer, copying the contents of a `UInt8` array.
    init(bytes: [UInt8]) {
        let rbuf = bytes.withUnsafeBufferPointer { ptr in
            RustBuffer.from(ptr)
        }
        self.init(capacity: rbuf.capacity, len: rbuf.len, data: rbuf.data)
    }

    static func empty() -> RustBuffer {
        RustBuffer(capacity: 0, len:0, data: nil)
    }

    static func from(_ ptr: UnsafeBufferPointer<UInt8>) -> RustBuffer {
        try! rustCall { ffi_bitwarden_fido_rustbuffer_from_bytes(ForeignBytes(bufferPointer: ptr), $0) }
    }

    // Frees the buffer in place.
    // The buffer must not be used after this is called.
    func deallocate() {
        try! rustCall { ffi_bitwarden_fido_rustbuffer_free(self, $0) }
    }
}

fileprivate extension ForeignBytes {
    init(bufferPointer: UnsafeBufferPointer<UInt8>) {
        self.init(len: Int32(bufferPointer.count), data: bufferPointer.baseAddress)
    }
}

// For every type used in the interface, we provide helper methods for conveniently
// lifting and lowering that type from C-compatible data, and for reading and writing
// values of that type in a buffer.

// Helper classes/extensions that don't change.
// Someday, this will be in a library of its own.

fileprivate extension Data {
    init(rustBuffer: RustBuffer) {
        // TODO: This copies the buffer. Can we read directly from a
        // Rust buffer?
        self.init(bytes: rustBuffer.data!, count: Int(rustBuffer.len))
    }
}

// Define reader functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.
//
// With external types, one swift source file needs to be able to call the read
// method on another source file's FfiConverter, but then what visibility
// should Reader have?
// - If Reader is fileprivate, then this means the read() must also
//   be fileprivate, which doesn't work with external types.
// - If Reader is internal/public, we'll get compile errors since both source
//   files will try define the same type.
//
// Instead, the read() method and these helper functions input a tuple of data

fileprivate func createReader(data: Data) -> (data: Data, offset: Data.Index) {
    (data: data, offset: 0)
}

// Reads an integer at the current offset, in big-endian order, and advances
// the offset on success. Throws if reading the integer would move the
// offset past the end of the buffer.
fileprivate func readInt<T: FixedWidthInteger>(_ reader: inout (data: Data, offset: Data.Index)) throws -> T {
    let range = reader.offset..<reader.offset + MemoryLayout<T>.size
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    if T.self == UInt8.self {
        let value = reader.data[reader.offset]
        reader.offset += 1
        return value as! T
    }
    var value: T = 0
    let _ = withUnsafeMutableBytes(of: &value, { reader.data.copyBytes(to: $0, from: range)})
    reader.offset = range.upperBound
    return value.bigEndian
}

// Reads an arbitrary number of bytes, to be used to read
// raw bytes, this is useful when lifting strings
fileprivate func readBytes(_ reader: inout (data: Data, offset: Data.Index), count: Int) throws -> Array<UInt8> {
    let range = reader.offset..<(reader.offset+count)
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    var value = [UInt8](repeating: 0, count: count)
    value.withUnsafeMutableBufferPointer({ buffer in
        reader.data.copyBytes(to: buffer, from: range)
    })
    reader.offset = range.upperBound
    return value
}

// Reads a float at the current offset.
fileprivate func readFloat(_ reader: inout (data: Data, offset: Data.Index)) throws -> Float {
    return Float(bitPattern: try readInt(&reader))
}

// Reads a float at the current offset.
fileprivate func readDouble(_ reader: inout (data: Data, offset: Data.Index)) throws -> Double {
    return Double(bitPattern: try readInt(&reader))
}

// Indicates if the offset has reached the end of the buffer.
fileprivate func hasRemaining(_ reader: (data: Data, offset: Data.Index)) -> Bool {
    return reader.offset < reader.data.count
}

// Define writer functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.  See the above discussion on Readers for details.

fileprivate func createWriter() -> [UInt8] {
    return []
}

fileprivate func writeBytes<S>(_ writer: inout [UInt8], _ byteArr: S) where S: Sequence, S.Element == UInt8 {
    writer.append(contentsOf: byteArr)
}

// Writes an integer in big-endian order.
//
// Warning: make sure what you are trying to write
// is in the correct type!
fileprivate func writeInt<T: FixedWidthInteger>(_ writer: inout [UInt8], _ value: T) {
    var value = value.bigEndian
    withUnsafeBytes(of: &value) { writer.append(contentsOf: $0) }
}

fileprivate func writeFloat(_ writer: inout [UInt8], _ value: Float) {
    writeInt(&writer, value.bitPattern)
}

fileprivate func writeDouble(_ writer: inout [UInt8], _ value: Double) {
    writeInt(&writer, value.bitPattern)
}

// Protocol for types that transfer other types across the FFI. This is
// analogous go the Rust trait of the same name.
fileprivate protocol FfiConverter {
    associatedtype FfiType
    associatedtype SwiftType

    static func lift(_ value: FfiType) throws -> SwiftType
    static func lower(_ value: SwiftType) -> FfiType
    static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType
    static func write(_ value: SwiftType, into buf: inout [UInt8])
}

// Types conforming to `Primitive` pass themselves directly over the FFI.
fileprivate protocol FfiConverterPrimitive: FfiConverter where FfiType == SwiftType { }

extension FfiConverterPrimitive {
    public static func lift(_ value: FfiType) throws -> SwiftType {
        return value
    }

    public static func lower(_ value: SwiftType) -> FfiType {
        return value
    }
}

// Types conforming to `FfiConverterRustBuffer` lift and lower into a `RustBuffer`.
// Used for complex types where it's hard to write a custom lift/lower.
fileprivate protocol FfiConverterRustBuffer: FfiConverter where FfiType == RustBuffer {}

extension FfiConverterRustBuffer {
    public static func lift(_ buf: RustBuffer) throws -> SwiftType {
        var reader = createReader(data: Data(rustBuffer: buf))
        let value = try read(from: &reader)
        if hasRemaining(reader) {
            throw UniffiInternalError.incompleteData
        }
        buf.deallocate()
        return value
    }

    public static func lower(_ value: SwiftType) -> RustBuffer {
          var writer = createWriter()
          write(value, into: &writer)
          return RustBuffer(bytes: writer)
    }
}
// An error type for FFI errors. These errors occur at the UniFFI level, not
// the library level.
fileprivate enum UniffiInternalError: LocalizedError {
    case bufferOverflow
    case incompleteData
    case unexpectedOptionalTag
    case unexpectedEnumCase
    case unexpectedNullPointer
    case unexpectedRustCallStatusCode
    case unexpectedRustCallError
    case unexpectedStaleHandle
    case rustPanic(_ message: String)

    public var errorDescription: String? {
        switch self {
        case .bufferOverflow: return "Reading the requested value would read past the end of the buffer"
        case .incompleteData: return "The buffer still has data after lifting its containing value"
        case .unexpectedOptionalTag: return "Unexpected optional tag; should be 0 or 1"
        case .unexpectedEnumCase: return "Raw enum value doesn't match any cases"
        case .unexpectedNullPointer: return "Raw pointer value was null"
        case .unexpectedRustCallStatusCode: return "Unexpected RustCallStatus code"
        case .unexpectedRustCallError: return "CALL_ERROR but no errorClass specified"
        case .unexpectedStaleHandle: return "The object in the handle map has been dropped already"
        case let .rustPanic(message): return message
        }
    }
}

fileprivate extension NSLock {
    func withLock<T>(f: () throws -> T) rethrows -> T {
        self.lock()
        defer { self.unlock() }
        return try f()
    }
}

fileprivate let CALL_SUCCESS: Int8 = 0
fileprivate let CALL_ERROR: Int8 = 1
fileprivate let CALL_UNEXPECTED_ERROR: Int8 = 2
fileprivate let CALL_CANCELLED: Int8 = 3

fileprivate extension RustCallStatus {
    init() {
        self.init(
            code: CALL_SUCCESS,
            errorBuf: RustBuffer.init(
                capacity: 0,
                len: 0,
                data: nil
            )
        )
    }
}

private func rustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: nil)
}

private func rustCallWithError<T>(
    _ errorHandler: @escaping (RustBuffer) throws -> Error,
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: errorHandler)
}

private func makeRustCall<T>(
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T,
    errorHandler: ((RustBuffer) throws -> Error)?
) throws -> T {
    uniffiEnsureInitialized()
    var callStatus = RustCallStatus.init()
    let returnedVal = callback(&callStatus)
    try uniffiCheckCallStatus(callStatus: callStatus, errorHandler: errorHandler)
    return returnedVal
}

private func uniffiCheckCallStatus(
    callStatus: RustCallStatus,
    errorHandler: ((RustBuffer) throws -> Error)?
) throws {
    switch callStatus.code {
        case CALL_SUCCESS:
            return

        case CALL_ERROR:
            if let errorHandler = errorHandler {
                throw try errorHandler(callStatus.errorBuf)
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.unexpectedRustCallError
            }

        case CALL_UNEXPECTED_ERROR:
            // When the rust code sees a panic, it tries to construct a RustBuffer
            // with the message.  But if that code panics, then it just sends back
            // an empty buffer.
            if callStatus.errorBuf.len > 0 {
                throw UniffiInternalError.rustPanic(try FfiConverterString.lift(callStatus.errorBuf))
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.rustPanic("Rust panic")
            }

        case CALL_CANCELLED:
            fatalError("Cancellation not supported yet")

        default:
            throw UniffiInternalError.unexpectedRustCallStatusCode
    }
}

private func uniffiTraitInterfaceCall<T>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> ()
) {
    do {
        try writeReturn(makeCall())
    } catch let error {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}

private func uniffiTraitInterfaceCallWithError<T, E>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> (),
    lowerError: (E) -> RustBuffer
) {
    do {
        try writeReturn(makeCall())
    } catch let error as E {
        callStatus.pointee.code = CALL_ERROR
        callStatus.pointee.errorBuf = lowerError(error)
    } catch {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}
fileprivate class UniffiHandleMap<T> {
    private var map: [UInt64: T] = [:]
    private let lock = NSLock()
    private var currentHandle: UInt64 = 1

    func insert(obj: T) -> UInt64 {
        lock.withLock {
            let handle = currentHandle
            currentHandle += 1
            map[handle] = obj
            return handle
        }
    }

     func get(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map[handle] else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

    @discardableResult
    func remove(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map.removeValue(forKey: handle) else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

    var count: Int {
        get {
            map.count
        }
    }
}


// Public interface members begin here.


fileprivate struct FfiConverterInt64: FfiConverterPrimitive {
    typealias FfiType = Int64
    typealias SwiftType = Int64

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Int64 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: Int64, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

fileprivate struct FfiConverterBool : FfiConverter {
    typealias FfiType = Int8
    typealias SwiftType = Bool

    public static func lift(_ value: Int8) throws -> Bool {
        return value != 0
    }

    public static func lower(_ value: Bool) -> Int8 {
        return value ? 1 : 0
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Bool {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: Bool, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

fileprivate struct FfiConverterString: FfiConverter {
    typealias SwiftType = String
    typealias FfiType = RustBuffer

    public static func lift(_ value: RustBuffer) throws -> String {
        defer {
            value.deallocate()
        }
        if value.data == nil {
            return String()
        }
        let bytes = UnsafeBufferPointer<UInt8>(start: value.data!, count: Int(value.len))
        return String(bytes: bytes, encoding: String.Encoding.utf8)!
    }

    public static func lower(_ value: String) -> RustBuffer {
        return value.utf8CString.withUnsafeBufferPointer { ptr in
            // The swift string gives us int8_t, we want uint8_t.
            ptr.withMemoryRebound(to: UInt8.self) { ptr in
                // The swift string gives us a trailing null byte, we don't want it.
                let buf = UnsafeBufferPointer(rebasing: ptr.prefix(upTo: ptr.count - 1))
                return RustBuffer.from(buf)
            }
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> String {
        let len: Int32 = try readInt(&buf)
        return String(bytes: try readBytes(&buf, count: Int(len)), encoding: String.Encoding.utf8)!
    }

    public static func write(_ value: String, into buf: inout [UInt8]) {
        let len = Int32(value.utf8.count)
        writeInt(&buf, len)
        writeBytes(&buf, value.utf8)
    }
}

fileprivate struct FfiConverterData: FfiConverterRustBuffer {
    typealias SwiftType = Data

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Data {
        let len: Int32 = try readInt(&buf)
        return Data(try readBytes(&buf, count: Int(len)))
    }

    public static func write(_ value: Data, into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        writeBytes(&buf, value)
    }
}


public struct AuthenticatorAssertionResponse {
    public let clientDataJson: Data
    public let authenticatorData: Data
    public let signature: Data
    public let userHandle: Data

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(clientDataJson: Data, authenticatorData: Data, signature: Data, userHandle: Data) {
        self.clientDataJson = clientDataJson
        self.authenticatorData = authenticatorData
        self.signature = signature
        self.userHandle = userHandle
    }
}



extension AuthenticatorAssertionResponse: Equatable, Hashable {
    public static func ==(lhs: AuthenticatorAssertionResponse, rhs: AuthenticatorAssertionResponse) -> Bool {
        if lhs.clientDataJson != rhs.clientDataJson {
            return false
        }
        if lhs.authenticatorData != rhs.authenticatorData {
            return false
        }
        if lhs.signature != rhs.signature {
            return false
        }
        if lhs.userHandle != rhs.userHandle {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(clientDataJson)
        hasher.combine(authenticatorData)
        hasher.combine(signature)
        hasher.combine(userHandle)
    }
}


public struct FfiConverterTypeAuthenticatorAssertionResponse: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AuthenticatorAssertionResponse {
        return
            try AuthenticatorAssertionResponse(
                clientDataJson: FfiConverterData.read(from: &buf), 
                authenticatorData: FfiConverterData.read(from: &buf), 
                signature: FfiConverterData.read(from: &buf), 
                userHandle: FfiConverterData.read(from: &buf)
        )
    }

    public static func write(_ value: AuthenticatorAssertionResponse, into buf: inout [UInt8]) {
        FfiConverterData.write(value.clientDataJson, into: &buf)
        FfiConverterData.write(value.authenticatorData, into: &buf)
        FfiConverterData.write(value.signature, into: &buf)
        FfiConverterData.write(value.userHandle, into: &buf)
    }
}


public func FfiConverterTypeAuthenticatorAssertionResponse_lift(_ buf: RustBuffer) throws -> AuthenticatorAssertionResponse {
    return try FfiConverterTypeAuthenticatorAssertionResponse.lift(buf)
}

public func FfiConverterTypeAuthenticatorAssertionResponse_lower(_ value: AuthenticatorAssertionResponse) -> RustBuffer {
    return FfiConverterTypeAuthenticatorAssertionResponse.lower(value)
}


public struct AuthenticatorAttestationResponse {
    public let clientDataJson: Data
    public let authenticatorData: Data
    public let publicKey: Data?
    public let publicKeyAlgorithm: Int64
    public let attestationObject: Data
    public let transports: [String]?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(clientDataJson: Data, authenticatorData: Data, publicKey: Data?, publicKeyAlgorithm: Int64, attestationObject: Data, transports: [String]?) {
        self.clientDataJson = clientDataJson
        self.authenticatorData = authenticatorData
        self.publicKey = publicKey
        self.publicKeyAlgorithm = publicKeyAlgorithm
        self.attestationObject = attestationObject
        self.transports = transports
    }
}



extension AuthenticatorAttestationResponse: Equatable, Hashable {
    public static func ==(lhs: AuthenticatorAttestationResponse, rhs: AuthenticatorAttestationResponse) -> Bool {
        if lhs.clientDataJson != rhs.clientDataJson {
            return false
        }
        if lhs.authenticatorData != rhs.authenticatorData {
            return false
        }
        if lhs.publicKey != rhs.publicKey {
            return false
        }
        if lhs.publicKeyAlgorithm != rhs.publicKeyAlgorithm {
            return false
        }
        if lhs.attestationObject != rhs.attestationObject {
            return false
        }
        if lhs.transports != rhs.transports {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(clientDataJson)
        hasher.combine(authenticatorData)
        hasher.combine(publicKey)
        hasher.combine(publicKeyAlgorithm)
        hasher.combine(attestationObject)
        hasher.combine(transports)
    }
}


public struct FfiConverterTypeAuthenticatorAttestationResponse: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AuthenticatorAttestationResponse {
        return
            try AuthenticatorAttestationResponse(
                clientDataJson: FfiConverterData.read(from: &buf), 
                authenticatorData: FfiConverterData.read(from: &buf), 
                publicKey: FfiConverterOptionData.read(from: &buf), 
                publicKeyAlgorithm: FfiConverterInt64.read(from: &buf), 
                attestationObject: FfiConverterData.read(from: &buf), 
                transports: FfiConverterOptionSequenceString.read(from: &buf)
        )
    }

    public static func write(_ value: AuthenticatorAttestationResponse, into buf: inout [UInt8]) {
        FfiConverterData.write(value.clientDataJson, into: &buf)
        FfiConverterData.write(value.authenticatorData, into: &buf)
        FfiConverterOptionData.write(value.publicKey, into: &buf)
        FfiConverterInt64.write(value.publicKeyAlgorithm, into: &buf)
        FfiConverterData.write(value.attestationObject, into: &buf)
        FfiConverterOptionSequenceString.write(value.transports, into: &buf)
    }
}


public func FfiConverterTypeAuthenticatorAttestationResponse_lift(_ buf: RustBuffer) throws -> AuthenticatorAttestationResponse {
    return try FfiConverterTypeAuthenticatorAttestationResponse.lift(buf)
}

public func FfiConverterTypeAuthenticatorAttestationResponse_lower(_ value: AuthenticatorAttestationResponse) -> RustBuffer {
    return FfiConverterTypeAuthenticatorAttestationResponse.lower(value)
}


public struct CheckUserOptions {
    public let requirePresence: Bool
    public let requireVerification: Verification

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(requirePresence: Bool, requireVerification: Verification) {
        self.requirePresence = requirePresence
        self.requireVerification = requireVerification
    }
}



extension CheckUserOptions: Equatable, Hashable {
    public static func ==(lhs: CheckUserOptions, rhs: CheckUserOptions) -> Bool {
        if lhs.requirePresence != rhs.requirePresence {
            return false
        }
        if lhs.requireVerification != rhs.requireVerification {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(requirePresence)
        hasher.combine(requireVerification)
    }
}


public struct FfiConverterTypeCheckUserOptions: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> CheckUserOptions {
        return
            try CheckUserOptions(
                requirePresence: FfiConverterBool.read(from: &buf), 
                requireVerification: FfiConverterTypeVerification.read(from: &buf)
        )
    }

    public static func write(_ value: CheckUserOptions, into buf: inout [UInt8]) {
        FfiConverterBool.write(value.requirePresence, into: &buf)
        FfiConverterTypeVerification.write(value.requireVerification, into: &buf)
    }
}


public func FfiConverterTypeCheckUserOptions_lift(_ buf: RustBuffer) throws -> CheckUserOptions {
    return try FfiConverterTypeCheckUserOptions.lift(buf)
}

public func FfiConverterTypeCheckUserOptions_lower(_ value: CheckUserOptions) -> RustBuffer {
    return FfiConverterTypeCheckUserOptions.lower(value)
}


public struct ClientExtensionResults {
    public let credProps: CredPropsResult?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(credProps: CredPropsResult?) {
        self.credProps = credProps
    }
}



extension ClientExtensionResults: Equatable, Hashable {
    public static func ==(lhs: ClientExtensionResults, rhs: ClientExtensionResults) -> Bool {
        if lhs.credProps != rhs.credProps {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(credProps)
    }
}


public struct FfiConverterTypeClientExtensionResults: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ClientExtensionResults {
        return
            try ClientExtensionResults(
                credProps: FfiConverterOptionTypeCredPropsResult.read(from: &buf)
        )
    }

    public static func write(_ value: ClientExtensionResults, into buf: inout [UInt8]) {
        FfiConverterOptionTypeCredPropsResult.write(value.credProps, into: &buf)
    }
}


public func FfiConverterTypeClientExtensionResults_lift(_ buf: RustBuffer) throws -> ClientExtensionResults {
    return try FfiConverterTypeClientExtensionResults.lift(buf)
}

public func FfiConverterTypeClientExtensionResults_lower(_ value: ClientExtensionResults) -> RustBuffer {
    return FfiConverterTypeClientExtensionResults.lower(value)
}


public struct CredPropsResult {
    public let rk: Bool?
    public let authenticatorDisplayName: String?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(rk: Bool?, authenticatorDisplayName: String?) {
        self.rk = rk
        self.authenticatorDisplayName = authenticatorDisplayName
    }
}



extension CredPropsResult: Equatable, Hashable {
    public static func ==(lhs: CredPropsResult, rhs: CredPropsResult) -> Bool {
        if lhs.rk != rhs.rk {
            return false
        }
        if lhs.authenticatorDisplayName != rhs.authenticatorDisplayName {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(rk)
        hasher.combine(authenticatorDisplayName)
    }
}


public struct FfiConverterTypeCredPropsResult: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> CredPropsResult {
        return
            try CredPropsResult(
                rk: FfiConverterOptionBool.read(from: &buf), 
                authenticatorDisplayName: FfiConverterOptionString.read(from: &buf)
        )
    }

    public static func write(_ value: CredPropsResult, into buf: inout [UInt8]) {
        FfiConverterOptionBool.write(value.rk, into: &buf)
        FfiConverterOptionString.write(value.authenticatorDisplayName, into: &buf)
    }
}


public func FfiConverterTypeCredPropsResult_lift(_ buf: RustBuffer) throws -> CredPropsResult {
    return try FfiConverterTypeCredPropsResult.lift(buf)
}

public func FfiConverterTypeCredPropsResult_lower(_ value: CredPropsResult) -> RustBuffer {
    return FfiConverterTypeCredPropsResult.lower(value)
}


public struct Fido2CredentialAutofillView {
    public let credentialId: Data
    public let cipherId: Uuid
    public let rpId: String
    public let userNameForUi: String?
    public let userHandle: Data

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(credentialId: Data, cipherId: Uuid, rpId: String, userNameForUi: String?, userHandle: Data) {
        self.credentialId = credentialId
        self.cipherId = cipherId
        self.rpId = rpId
        self.userNameForUi = userNameForUi
        self.userHandle = userHandle
    }
}



extension Fido2CredentialAutofillView: Equatable, Hashable {
    public static func ==(lhs: Fido2CredentialAutofillView, rhs: Fido2CredentialAutofillView) -> Bool {
        if lhs.credentialId != rhs.credentialId {
            return false
        }
        if lhs.cipherId != rhs.cipherId {
            return false
        }
        if lhs.rpId != rhs.rpId {
            return false
        }
        if lhs.userNameForUi != rhs.userNameForUi {
            return false
        }
        if lhs.userHandle != rhs.userHandle {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(credentialId)
        hasher.combine(cipherId)
        hasher.combine(rpId)
        hasher.combine(userNameForUi)
        hasher.combine(userHandle)
    }
}


public struct FfiConverterTypeFido2CredentialAutofillView: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Fido2CredentialAutofillView {
        return
            try Fido2CredentialAutofillView(
                credentialId: FfiConverterData.read(from: &buf), 
                cipherId: FfiConverterTypeUuid.read(from: &buf), 
                rpId: FfiConverterString.read(from: &buf), 
                userNameForUi: FfiConverterOptionString.read(from: &buf), 
                userHandle: FfiConverterData.read(from: &buf)
        )
    }

    public static func write(_ value: Fido2CredentialAutofillView, into buf: inout [UInt8]) {
        FfiConverterData.write(value.credentialId, into: &buf)
        FfiConverterTypeUuid.write(value.cipherId, into: &buf)
        FfiConverterString.write(value.rpId, into: &buf)
        FfiConverterOptionString.write(value.userNameForUi, into: &buf)
        FfiConverterData.write(value.userHandle, into: &buf)
    }
}


public func FfiConverterTypeFido2CredentialAutofillView_lift(_ buf: RustBuffer) throws -> Fido2CredentialAutofillView {
    return try FfiConverterTypeFido2CredentialAutofillView.lift(buf)
}

public func FfiConverterTypeFido2CredentialAutofillView_lower(_ value: Fido2CredentialAutofillView) -> RustBuffer {
    return FfiConverterTypeFido2CredentialAutofillView.lower(value)
}


public struct GetAssertionRequest {
    public let rpId: String
    public let clientDataHash: Data
    public let allowList: [PublicKeyCredentialDescriptor]?
    public let options: Options
    public let extensions: String?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(rpId: String, clientDataHash: Data, allowList: [PublicKeyCredentialDescriptor]?, options: Options, extensions: String?) {
        self.rpId = rpId
        self.clientDataHash = clientDataHash
        self.allowList = allowList
        self.options = options
        self.extensions = extensions
    }
}



extension GetAssertionRequest: Equatable, Hashable {
    public static func ==(lhs: GetAssertionRequest, rhs: GetAssertionRequest) -> Bool {
        if lhs.rpId != rhs.rpId {
            return false
        }
        if lhs.clientDataHash != rhs.clientDataHash {
            return false
        }
        if lhs.allowList != rhs.allowList {
            return false
        }
        if lhs.options != rhs.options {
            return false
        }
        if lhs.extensions != rhs.extensions {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(rpId)
        hasher.combine(clientDataHash)
        hasher.combine(allowList)
        hasher.combine(options)
        hasher.combine(extensions)
    }
}


public struct FfiConverterTypeGetAssertionRequest: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> GetAssertionRequest {
        return
            try GetAssertionRequest(
                rpId: FfiConverterString.read(from: &buf), 
                clientDataHash: FfiConverterData.read(from: &buf), 
                allowList: FfiConverterOptionSequenceTypePublicKeyCredentialDescriptor.read(from: &buf), 
                options: FfiConverterTypeOptions.read(from: &buf), 
                extensions: FfiConverterOptionString.read(from: &buf)
        )
    }

    public static func write(_ value: GetAssertionRequest, into buf: inout [UInt8]) {
        FfiConverterString.write(value.rpId, into: &buf)
        FfiConverterData.write(value.clientDataHash, into: &buf)
        FfiConverterOptionSequenceTypePublicKeyCredentialDescriptor.write(value.allowList, into: &buf)
        FfiConverterTypeOptions.write(value.options, into: &buf)
        FfiConverterOptionString.write(value.extensions, into: &buf)
    }
}


public func FfiConverterTypeGetAssertionRequest_lift(_ buf: RustBuffer) throws -> GetAssertionRequest {
    return try FfiConverterTypeGetAssertionRequest.lift(buf)
}

public func FfiConverterTypeGetAssertionRequest_lower(_ value: GetAssertionRequest) -> RustBuffer {
    return FfiConverterTypeGetAssertionRequest.lower(value)
}


public struct GetAssertionResult {
    public let credentialId: Data
    public let authenticatorData: Data
    public let signature: Data
    public let userHandle: Data
    public let selectedCredential: SelectedCredential

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(credentialId: Data, authenticatorData: Data, signature: Data, userHandle: Data, selectedCredential: SelectedCredential) {
        self.credentialId = credentialId
        self.authenticatorData = authenticatorData
        self.signature = signature
        self.userHandle = userHandle
        self.selectedCredential = selectedCredential
    }
}



extension GetAssertionResult: Equatable, Hashable {
    public static func ==(lhs: GetAssertionResult, rhs: GetAssertionResult) -> Bool {
        if lhs.credentialId != rhs.credentialId {
            return false
        }
        if lhs.authenticatorData != rhs.authenticatorData {
            return false
        }
        if lhs.signature != rhs.signature {
            return false
        }
        if lhs.userHandle != rhs.userHandle {
            return false
        }
        if lhs.selectedCredential != rhs.selectedCredential {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(credentialId)
        hasher.combine(authenticatorData)
        hasher.combine(signature)
        hasher.combine(userHandle)
        hasher.combine(selectedCredential)
    }
}


public struct FfiConverterTypeGetAssertionResult: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> GetAssertionResult {
        return
            try GetAssertionResult(
                credentialId: FfiConverterData.read(from: &buf), 
                authenticatorData: FfiConverterData.read(from: &buf), 
                signature: FfiConverterData.read(from: &buf), 
                userHandle: FfiConverterData.read(from: &buf), 
                selectedCredential: FfiConverterTypeSelectedCredential.read(from: &buf)
        )
    }

    public static func write(_ value: GetAssertionResult, into buf: inout [UInt8]) {
        FfiConverterData.write(value.credentialId, into: &buf)
        FfiConverterData.write(value.authenticatorData, into: &buf)
        FfiConverterData.write(value.signature, into: &buf)
        FfiConverterData.write(value.userHandle, into: &buf)
        FfiConverterTypeSelectedCredential.write(value.selectedCredential, into: &buf)
    }
}


public func FfiConverterTypeGetAssertionResult_lift(_ buf: RustBuffer) throws -> GetAssertionResult {
    return try FfiConverterTypeGetAssertionResult.lift(buf)
}

public func FfiConverterTypeGetAssertionResult_lower(_ value: GetAssertionResult) -> RustBuffer {
    return FfiConverterTypeGetAssertionResult.lower(value)
}


public struct MakeCredentialRequest {
    public let clientDataHash: Data
    public let rp: PublicKeyCredentialRpEntity
    public let user: PublicKeyCredentialUserEntity
    public let pubKeyCredParams: [PublicKeyCredentialParameters]
    public let excludeList: [PublicKeyCredentialDescriptor]?
    public let options: Options
    public let extensions: String?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(clientDataHash: Data, rp: PublicKeyCredentialRpEntity, user: PublicKeyCredentialUserEntity, pubKeyCredParams: [PublicKeyCredentialParameters], excludeList: [PublicKeyCredentialDescriptor]?, options: Options, extensions: String?) {
        self.clientDataHash = clientDataHash
        self.rp = rp
        self.user = user
        self.pubKeyCredParams = pubKeyCredParams
        self.excludeList = excludeList
        self.options = options
        self.extensions = extensions
    }
}



extension MakeCredentialRequest: Equatable, Hashable {
    public static func ==(lhs: MakeCredentialRequest, rhs: MakeCredentialRequest) -> Bool {
        if lhs.clientDataHash != rhs.clientDataHash {
            return false
        }
        if lhs.rp != rhs.rp {
            return false
        }
        if lhs.user != rhs.user {
            return false
        }
        if lhs.pubKeyCredParams != rhs.pubKeyCredParams {
            return false
        }
        if lhs.excludeList != rhs.excludeList {
            return false
        }
        if lhs.options != rhs.options {
            return false
        }
        if lhs.extensions != rhs.extensions {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(clientDataHash)
        hasher.combine(rp)
        hasher.combine(user)
        hasher.combine(pubKeyCredParams)
        hasher.combine(excludeList)
        hasher.combine(options)
        hasher.combine(extensions)
    }
}


public struct FfiConverterTypeMakeCredentialRequest: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> MakeCredentialRequest {
        return
            try MakeCredentialRequest(
                clientDataHash: FfiConverterData.read(from: &buf), 
                rp: FfiConverterTypePublicKeyCredentialRpEntity.read(from: &buf), 
                user: FfiConverterTypePublicKeyCredentialUserEntity.read(from: &buf), 
                pubKeyCredParams: FfiConverterSequenceTypePublicKeyCredentialParameters.read(from: &buf), 
                excludeList: FfiConverterOptionSequenceTypePublicKeyCredentialDescriptor.read(from: &buf), 
                options: FfiConverterTypeOptions.read(from: &buf), 
                extensions: FfiConverterOptionString.read(from: &buf)
        )
    }

    public static func write(_ value: MakeCredentialRequest, into buf: inout [UInt8]) {
        FfiConverterData.write(value.clientDataHash, into: &buf)
        FfiConverterTypePublicKeyCredentialRpEntity.write(value.rp, into: &buf)
        FfiConverterTypePublicKeyCredentialUserEntity.write(value.user, into: &buf)
        FfiConverterSequenceTypePublicKeyCredentialParameters.write(value.pubKeyCredParams, into: &buf)
        FfiConverterOptionSequenceTypePublicKeyCredentialDescriptor.write(value.excludeList, into: &buf)
        FfiConverterTypeOptions.write(value.options, into: &buf)
        FfiConverterOptionString.write(value.extensions, into: &buf)
    }
}


public func FfiConverterTypeMakeCredentialRequest_lift(_ buf: RustBuffer) throws -> MakeCredentialRequest {
    return try FfiConverterTypeMakeCredentialRequest.lift(buf)
}

public func FfiConverterTypeMakeCredentialRequest_lower(_ value: MakeCredentialRequest) -> RustBuffer {
    return FfiConverterTypeMakeCredentialRequest.lower(value)
}


public struct MakeCredentialResult {
    public let authenticatorData: Data
    public let attestationObject: Data
    public let credentialId: Data

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(authenticatorData: Data, attestationObject: Data, credentialId: Data) {
        self.authenticatorData = authenticatorData
        self.attestationObject = attestationObject
        self.credentialId = credentialId
    }
}



extension MakeCredentialResult: Equatable, Hashable {
    public static func ==(lhs: MakeCredentialResult, rhs: MakeCredentialResult) -> Bool {
        if lhs.authenticatorData != rhs.authenticatorData {
            return false
        }
        if lhs.attestationObject != rhs.attestationObject {
            return false
        }
        if lhs.credentialId != rhs.credentialId {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(authenticatorData)
        hasher.combine(attestationObject)
        hasher.combine(credentialId)
    }
}


public struct FfiConverterTypeMakeCredentialResult: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> MakeCredentialResult {
        return
            try MakeCredentialResult(
                authenticatorData: FfiConverterData.read(from: &buf), 
                attestationObject: FfiConverterData.read(from: &buf), 
                credentialId: FfiConverterData.read(from: &buf)
        )
    }

    public static func write(_ value: MakeCredentialResult, into buf: inout [UInt8]) {
        FfiConverterData.write(value.authenticatorData, into: &buf)
        FfiConverterData.write(value.attestationObject, into: &buf)
        FfiConverterData.write(value.credentialId, into: &buf)
    }
}


public func FfiConverterTypeMakeCredentialResult_lift(_ buf: RustBuffer) throws -> MakeCredentialResult {
    return try FfiConverterTypeMakeCredentialResult.lift(buf)
}

public func FfiConverterTypeMakeCredentialResult_lower(_ value: MakeCredentialResult) -> RustBuffer {
    return FfiConverterTypeMakeCredentialResult.lower(value)
}


public struct Options {
    public let rk: Bool
    public let uv: Uv

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(rk: Bool, uv: Uv) {
        self.rk = rk
        self.uv = uv
    }
}



extension Options: Equatable, Hashable {
    public static func ==(lhs: Options, rhs: Options) -> Bool {
        if lhs.rk != rhs.rk {
            return false
        }
        if lhs.uv != rhs.uv {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(rk)
        hasher.combine(uv)
    }
}


public struct FfiConverterTypeOptions: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Options {
        return
            try Options(
                rk: FfiConverterBool.read(from: &buf), 
                uv: FfiConverterTypeUV.read(from: &buf)
        )
    }

    public static func write(_ value: Options, into buf: inout [UInt8]) {
        FfiConverterBool.write(value.rk, into: &buf)
        FfiConverterTypeUV.write(value.uv, into: &buf)
    }
}


public func FfiConverterTypeOptions_lift(_ buf: RustBuffer) throws -> Options {
    return try FfiConverterTypeOptions.lift(buf)
}

public func FfiConverterTypeOptions_lower(_ value: Options) -> RustBuffer {
    return FfiConverterTypeOptions.lower(value)
}


public struct PublicKeyCredentialAuthenticatorAssertionResponse {
    public let id: String
    public let rawId: Data
    public let ty: String
    public let authenticatorAttachment: String?
    public let clientExtensionResults: ClientExtensionResults
    public let response: AuthenticatorAssertionResponse
    public let selectedCredential: SelectedCredential

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(id: String, rawId: Data, ty: String, authenticatorAttachment: String?, clientExtensionResults: ClientExtensionResults, response: AuthenticatorAssertionResponse, selectedCredential: SelectedCredential) {
        self.id = id
        self.rawId = rawId
        self.ty = ty
        self.authenticatorAttachment = authenticatorAttachment
        self.clientExtensionResults = clientExtensionResults
        self.response = response
        self.selectedCredential = selectedCredential
    }
}



extension PublicKeyCredentialAuthenticatorAssertionResponse: Equatable, Hashable {
    public static func ==(lhs: PublicKeyCredentialAuthenticatorAssertionResponse, rhs: PublicKeyCredentialAuthenticatorAssertionResponse) -> Bool {
        if lhs.id != rhs.id {
            return false
        }
        if lhs.rawId != rhs.rawId {
            return false
        }
        if lhs.ty != rhs.ty {
            return false
        }
        if lhs.authenticatorAttachment != rhs.authenticatorAttachment {
            return false
        }
        if lhs.clientExtensionResults != rhs.clientExtensionResults {
            return false
        }
        if lhs.response != rhs.response {
            return false
        }
        if lhs.selectedCredential != rhs.selectedCredential {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(id)
        hasher.combine(rawId)
        hasher.combine(ty)
        hasher.combine(authenticatorAttachment)
        hasher.combine(clientExtensionResults)
        hasher.combine(response)
        hasher.combine(selectedCredential)
    }
}


public struct FfiConverterTypePublicKeyCredentialAuthenticatorAssertionResponse: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PublicKeyCredentialAuthenticatorAssertionResponse {
        return
            try PublicKeyCredentialAuthenticatorAssertionResponse(
                id: FfiConverterString.read(from: &buf), 
                rawId: FfiConverterData.read(from: &buf), 
                ty: FfiConverterString.read(from: &buf), 
                authenticatorAttachment: FfiConverterOptionString.read(from: &buf), 
                clientExtensionResults: FfiConverterTypeClientExtensionResults.read(from: &buf), 
                response: FfiConverterTypeAuthenticatorAssertionResponse.read(from: &buf), 
                selectedCredential: FfiConverterTypeSelectedCredential.read(from: &buf)
        )
    }

    public static func write(_ value: PublicKeyCredentialAuthenticatorAssertionResponse, into buf: inout [UInt8]) {
        FfiConverterString.write(value.id, into: &buf)
        FfiConverterData.write(value.rawId, into: &buf)
        FfiConverterString.write(value.ty, into: &buf)
        FfiConverterOptionString.write(value.authenticatorAttachment, into: &buf)
        FfiConverterTypeClientExtensionResults.write(value.clientExtensionResults, into: &buf)
        FfiConverterTypeAuthenticatorAssertionResponse.write(value.response, into: &buf)
        FfiConverterTypeSelectedCredential.write(value.selectedCredential, into: &buf)
    }
}


public func FfiConverterTypePublicKeyCredentialAuthenticatorAssertionResponse_lift(_ buf: RustBuffer) throws -> PublicKeyCredentialAuthenticatorAssertionResponse {
    return try FfiConverterTypePublicKeyCredentialAuthenticatorAssertionResponse.lift(buf)
}

public func FfiConverterTypePublicKeyCredentialAuthenticatorAssertionResponse_lower(_ value: PublicKeyCredentialAuthenticatorAssertionResponse) -> RustBuffer {
    return FfiConverterTypePublicKeyCredentialAuthenticatorAssertionResponse.lower(value)
}


public struct PublicKeyCredentialAuthenticatorAttestationResponse {
    public let id: String
    public let rawId: Data
    public let ty: String
    public let authenticatorAttachment: String?
    public let clientExtensionResults: ClientExtensionResults
    public let response: AuthenticatorAttestationResponse
    public let selectedCredential: SelectedCredential

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(id: String, rawId: Data, ty: String, authenticatorAttachment: String?, clientExtensionResults: ClientExtensionResults, response: AuthenticatorAttestationResponse, selectedCredential: SelectedCredential) {
        self.id = id
        self.rawId = rawId
        self.ty = ty
        self.authenticatorAttachment = authenticatorAttachment
        self.clientExtensionResults = clientExtensionResults
        self.response = response
        self.selectedCredential = selectedCredential
    }
}



extension PublicKeyCredentialAuthenticatorAttestationResponse: Equatable, Hashable {
    public static func ==(lhs: PublicKeyCredentialAuthenticatorAttestationResponse, rhs: PublicKeyCredentialAuthenticatorAttestationResponse) -> Bool {
        if lhs.id != rhs.id {
            return false
        }
        if lhs.rawId != rhs.rawId {
            return false
        }
        if lhs.ty != rhs.ty {
            return false
        }
        if lhs.authenticatorAttachment != rhs.authenticatorAttachment {
            return false
        }
        if lhs.clientExtensionResults != rhs.clientExtensionResults {
            return false
        }
        if lhs.response != rhs.response {
            return false
        }
        if lhs.selectedCredential != rhs.selectedCredential {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(id)
        hasher.combine(rawId)
        hasher.combine(ty)
        hasher.combine(authenticatorAttachment)
        hasher.combine(clientExtensionResults)
        hasher.combine(response)
        hasher.combine(selectedCredential)
    }
}


public struct FfiConverterTypePublicKeyCredentialAuthenticatorAttestationResponse: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PublicKeyCredentialAuthenticatorAttestationResponse {
        return
            try PublicKeyCredentialAuthenticatorAttestationResponse(
                id: FfiConverterString.read(from: &buf), 
                rawId: FfiConverterData.read(from: &buf), 
                ty: FfiConverterString.read(from: &buf), 
                authenticatorAttachment: FfiConverterOptionString.read(from: &buf), 
                clientExtensionResults: FfiConverterTypeClientExtensionResults.read(from: &buf), 
                response: FfiConverterTypeAuthenticatorAttestationResponse.read(from: &buf), 
                selectedCredential: FfiConverterTypeSelectedCredential.read(from: &buf)
        )
    }

    public static func write(_ value: PublicKeyCredentialAuthenticatorAttestationResponse, into buf: inout [UInt8]) {
        FfiConverterString.write(value.id, into: &buf)
        FfiConverterData.write(value.rawId, into: &buf)
        FfiConverterString.write(value.ty, into: &buf)
        FfiConverterOptionString.write(value.authenticatorAttachment, into: &buf)
        FfiConverterTypeClientExtensionResults.write(value.clientExtensionResults, into: &buf)
        FfiConverterTypeAuthenticatorAttestationResponse.write(value.response, into: &buf)
        FfiConverterTypeSelectedCredential.write(value.selectedCredential, into: &buf)
    }
}


public func FfiConverterTypePublicKeyCredentialAuthenticatorAttestationResponse_lift(_ buf: RustBuffer) throws -> PublicKeyCredentialAuthenticatorAttestationResponse {
    return try FfiConverterTypePublicKeyCredentialAuthenticatorAttestationResponse.lift(buf)
}

public func FfiConverterTypePublicKeyCredentialAuthenticatorAttestationResponse_lower(_ value: PublicKeyCredentialAuthenticatorAttestationResponse) -> RustBuffer {
    return FfiConverterTypePublicKeyCredentialAuthenticatorAttestationResponse.lower(value)
}


public struct PublicKeyCredentialDescriptor {
    public let ty: String
    public let id: Data
    public let transports: [String]?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(ty: String, id: Data, transports: [String]?) {
        self.ty = ty
        self.id = id
        self.transports = transports
    }
}



extension PublicKeyCredentialDescriptor: Equatable, Hashable {
    public static func ==(lhs: PublicKeyCredentialDescriptor, rhs: PublicKeyCredentialDescriptor) -> Bool {
        if lhs.ty != rhs.ty {
            return false
        }
        if lhs.id != rhs.id {
            return false
        }
        if lhs.transports != rhs.transports {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(ty)
        hasher.combine(id)
        hasher.combine(transports)
    }
}


public struct FfiConverterTypePublicKeyCredentialDescriptor: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PublicKeyCredentialDescriptor {
        return
            try PublicKeyCredentialDescriptor(
                ty: FfiConverterString.read(from: &buf), 
                id: FfiConverterData.read(from: &buf), 
                transports: FfiConverterOptionSequenceString.read(from: &buf)
        )
    }

    public static func write(_ value: PublicKeyCredentialDescriptor, into buf: inout [UInt8]) {
        FfiConverterString.write(value.ty, into: &buf)
        FfiConverterData.write(value.id, into: &buf)
        FfiConverterOptionSequenceString.write(value.transports, into: &buf)
    }
}


public func FfiConverterTypePublicKeyCredentialDescriptor_lift(_ buf: RustBuffer) throws -> PublicKeyCredentialDescriptor {
    return try FfiConverterTypePublicKeyCredentialDescriptor.lift(buf)
}

public func FfiConverterTypePublicKeyCredentialDescriptor_lower(_ value: PublicKeyCredentialDescriptor) -> RustBuffer {
    return FfiConverterTypePublicKeyCredentialDescriptor.lower(value)
}


public struct PublicKeyCredentialParameters {
    public let ty: String
    public let alg: Int64

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(ty: String, alg: Int64) {
        self.ty = ty
        self.alg = alg
    }
}



extension PublicKeyCredentialParameters: Equatable, Hashable {
    public static func ==(lhs: PublicKeyCredentialParameters, rhs: PublicKeyCredentialParameters) -> Bool {
        if lhs.ty != rhs.ty {
            return false
        }
        if lhs.alg != rhs.alg {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(ty)
        hasher.combine(alg)
    }
}


public struct FfiConverterTypePublicKeyCredentialParameters: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PublicKeyCredentialParameters {
        return
            try PublicKeyCredentialParameters(
                ty: FfiConverterString.read(from: &buf), 
                alg: FfiConverterInt64.read(from: &buf)
        )
    }

    public static func write(_ value: PublicKeyCredentialParameters, into buf: inout [UInt8]) {
        FfiConverterString.write(value.ty, into: &buf)
        FfiConverterInt64.write(value.alg, into: &buf)
    }
}


public func FfiConverterTypePublicKeyCredentialParameters_lift(_ buf: RustBuffer) throws -> PublicKeyCredentialParameters {
    return try FfiConverterTypePublicKeyCredentialParameters.lift(buf)
}

public func FfiConverterTypePublicKeyCredentialParameters_lower(_ value: PublicKeyCredentialParameters) -> RustBuffer {
    return FfiConverterTypePublicKeyCredentialParameters.lower(value)
}


public struct PublicKeyCredentialRpEntity {
    public let id: String
    public let name: String?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(id: String, name: String?) {
        self.id = id
        self.name = name
    }
}



extension PublicKeyCredentialRpEntity: Equatable, Hashable {
    public static func ==(lhs: PublicKeyCredentialRpEntity, rhs: PublicKeyCredentialRpEntity) -> Bool {
        if lhs.id != rhs.id {
            return false
        }
        if lhs.name != rhs.name {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(id)
        hasher.combine(name)
    }
}


public struct FfiConverterTypePublicKeyCredentialRpEntity: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PublicKeyCredentialRpEntity {
        return
            try PublicKeyCredentialRpEntity(
                id: FfiConverterString.read(from: &buf), 
                name: FfiConverterOptionString.read(from: &buf)
        )
    }

    public static func write(_ value: PublicKeyCredentialRpEntity, into buf: inout [UInt8]) {
        FfiConverterString.write(value.id, into: &buf)
        FfiConverterOptionString.write(value.name, into: &buf)
    }
}


public func FfiConverterTypePublicKeyCredentialRpEntity_lift(_ buf: RustBuffer) throws -> PublicKeyCredentialRpEntity {
    return try FfiConverterTypePublicKeyCredentialRpEntity.lift(buf)
}

public func FfiConverterTypePublicKeyCredentialRpEntity_lower(_ value: PublicKeyCredentialRpEntity) -> RustBuffer {
    return FfiConverterTypePublicKeyCredentialRpEntity.lower(value)
}


public struct PublicKeyCredentialUserEntity {
    public let id: Data
    public let displayName: String
    public let name: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(id: Data, displayName: String, name: String) {
        self.id = id
        self.displayName = displayName
        self.name = name
    }
}



extension PublicKeyCredentialUserEntity: Equatable, Hashable {
    public static func ==(lhs: PublicKeyCredentialUserEntity, rhs: PublicKeyCredentialUserEntity) -> Bool {
        if lhs.id != rhs.id {
            return false
        }
        if lhs.displayName != rhs.displayName {
            return false
        }
        if lhs.name != rhs.name {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(id)
        hasher.combine(displayName)
        hasher.combine(name)
    }
}


public struct FfiConverterTypePublicKeyCredentialUserEntity: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PublicKeyCredentialUserEntity {
        return
            try PublicKeyCredentialUserEntity(
                id: FfiConverterData.read(from: &buf), 
                displayName: FfiConverterString.read(from: &buf), 
                name: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: PublicKeyCredentialUserEntity, into buf: inout [UInt8]) {
        FfiConverterData.write(value.id, into: &buf)
        FfiConverterString.write(value.displayName, into: &buf)
        FfiConverterString.write(value.name, into: &buf)
    }
}


public func FfiConverterTypePublicKeyCredentialUserEntity_lift(_ buf: RustBuffer) throws -> PublicKeyCredentialUserEntity {
    return try FfiConverterTypePublicKeyCredentialUserEntity.lift(buf)
}

public func FfiConverterTypePublicKeyCredentialUserEntity_lower(_ value: PublicKeyCredentialUserEntity) -> RustBuffer {
    return FfiConverterTypePublicKeyCredentialUserEntity.lower(value)
}


public struct SelectedCredential {
    public let cipher: CipherView
    public let credential: Fido2CredentialView

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(cipher: CipherView, credential: Fido2CredentialView) {
        self.cipher = cipher
        self.credential = credential
    }
}



extension SelectedCredential: Equatable, Hashable {
    public static func ==(lhs: SelectedCredential, rhs: SelectedCredential) -> Bool {
        if lhs.cipher != rhs.cipher {
            return false
        }
        if lhs.credential != rhs.credential {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(cipher)
        hasher.combine(credential)
    }
}


public struct FfiConverterTypeSelectedCredential: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SelectedCredential {
        return
            try SelectedCredential(
                cipher: FfiConverterTypeCipherView.read(from: &buf), 
                credential: FfiConverterTypeFido2CredentialView.read(from: &buf)
        )
    }

    public static func write(_ value: SelectedCredential, into buf: inout [UInt8]) {
        FfiConverterTypeCipherView.write(value.cipher, into: &buf)
        FfiConverterTypeFido2CredentialView.write(value.credential, into: &buf)
    }
}


public func FfiConverterTypeSelectedCredential_lift(_ buf: RustBuffer) throws -> SelectedCredential {
    return try FfiConverterTypeSelectedCredential.lift(buf)
}

public func FfiConverterTypeSelectedCredential_lower(_ value: SelectedCredential) -> RustBuffer {
    return FfiConverterTypeSelectedCredential.lower(value)
}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum ClientData {
    
    case defaultWithExtraData(androidPackageName: String
    )
    case defaultWithCustomHash(hash: Data
    )
}


public struct FfiConverterTypeClientData: FfiConverterRustBuffer {
    typealias SwiftType = ClientData

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ClientData {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .defaultWithExtraData(androidPackageName: try FfiConverterString.read(from: &buf)
        )
        
        case 2: return .defaultWithCustomHash(hash: try FfiConverterData.read(from: &buf)
        )
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: ClientData, into buf: inout [UInt8]) {
        switch value {
        
        
        case let .defaultWithExtraData(androidPackageName):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(androidPackageName, into: &buf)
            
        
        case let .defaultWithCustomHash(hash):
            writeInt(&buf, Int32(2))
            FfiConverterData.write(hash, into: &buf)
            
        }
    }
}


public func FfiConverterTypeClientData_lift(_ buf: RustBuffer) throws -> ClientData {
    return try FfiConverterTypeClientData.lift(buf)
}

public func FfiConverterTypeClientData_lower(_ value: ClientData) -> RustBuffer {
    return FfiConverterTypeClientData.lower(value)
}



extension ClientData: Equatable, Hashable {}



// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum Uv {
    
    case discouraged
    case preferred
    case required
}


public struct FfiConverterTypeUV: FfiConverterRustBuffer {
    typealias SwiftType = Uv

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Uv {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .discouraged
        
        case 2: return .preferred
        
        case 3: return .required
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: Uv, into buf: inout [UInt8]) {
        switch value {
        
        
        case .discouraged:
            writeInt(&buf, Int32(1))
        
        
        case .preferred:
            writeInt(&buf, Int32(2))
        
        
        case .required:
            writeInt(&buf, Int32(3))
        
        }
    }
}


public func FfiConverterTypeUV_lift(_ buf: RustBuffer) throws -> Uv {
    return try FfiConverterTypeUV.lift(buf)
}

public func FfiConverterTypeUV_lower(_ value: Uv) -> RustBuffer {
    return FfiConverterTypeUV.lower(value)
}



extension Uv: Equatable, Hashable {}



// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum Verification {
    
    case discouraged
    case preferred
    case required
}


public struct FfiConverterTypeVerification: FfiConverterRustBuffer {
    typealias SwiftType = Verification

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Verification {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .discouraged
        
        case 2: return .preferred
        
        case 3: return .required
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: Verification, into buf: inout [UInt8]) {
        switch value {
        
        
        case .discouraged:
            writeInt(&buf, Int32(1))
        
        
        case .preferred:
            writeInt(&buf, Int32(2))
        
        
        case .required:
            writeInt(&buf, Int32(3))
        
        }
    }
}


public func FfiConverterTypeVerification_lift(_ buf: RustBuffer) throws -> Verification {
    return try FfiConverterTypeVerification.lift(buf)
}

public func FfiConverterTypeVerification_lower(_ value: Verification) -> RustBuffer {
    return FfiConverterTypeVerification.lower(value)
}



extension Verification: Equatable, Hashable {}



fileprivate struct FfiConverterOptionBool: FfiConverterRustBuffer {
    typealias SwiftType = Bool?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterBool.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterBool.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionString: FfiConverterRustBuffer {
    typealias SwiftType = String?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterString.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterString.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionData: FfiConverterRustBuffer {
    typealias SwiftType = Data?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterData.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterData.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionTypeCredPropsResult: FfiConverterRustBuffer {
    typealias SwiftType = CredPropsResult?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeCredPropsResult.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeCredPropsResult.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionSequenceString: FfiConverterRustBuffer {
    typealias SwiftType = [String]?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterSequenceString.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterSequenceString.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionSequenceTypePublicKeyCredentialDescriptor: FfiConverterRustBuffer {
    typealias SwiftType = [PublicKeyCredentialDescriptor]?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterSequenceTypePublicKeyCredentialDescriptor.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterSequenceTypePublicKeyCredentialDescriptor.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterSequenceString: FfiConverterRustBuffer {
    typealias SwiftType = [String]

    public static func write(_ value: [String], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterString.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [String] {
        let len: Int32 = try readInt(&buf)
        var seq = [String]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterString.read(from: &buf))
        }
        return seq
    }
}

fileprivate struct FfiConverterSequenceTypePublicKeyCredentialDescriptor: FfiConverterRustBuffer {
    typealias SwiftType = [PublicKeyCredentialDescriptor]

    public static func write(_ value: [PublicKeyCredentialDescriptor], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypePublicKeyCredentialDescriptor.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [PublicKeyCredentialDescriptor] {
        let len: Int32 = try readInt(&buf)
        var seq = [PublicKeyCredentialDescriptor]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypePublicKeyCredentialDescriptor.read(from: &buf))
        }
        return seq
    }
}

fileprivate struct FfiConverterSequenceTypePublicKeyCredentialParameters: FfiConverterRustBuffer {
    typealias SwiftType = [PublicKeyCredentialParameters]

    public static func write(_ value: [PublicKeyCredentialParameters], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypePublicKeyCredentialParameters.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [PublicKeyCredentialParameters] {
        let len: Int32 = try readInt(&buf)
        var seq = [PublicKeyCredentialParameters]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypePublicKeyCredentialParameters.read(from: &buf))
        }
        return seq
    }
}







private enum InitializationResult {
    case ok
    case contractVersionMismatch
    case apiChecksumMismatch
}
// Use a global variables to perform the versioning checks. Swift ensures that
// the code inside is only computed once.
private var initializationResult: InitializationResult {
    // Get the bindings contract version from our ComponentInterface
    let bindings_contract_version = 26
    // Get the scaffolding contract version by calling the into the dylib
    let scaffolding_contract_version = ffi_bitwarden_fido_uniffi_contract_version()
    if bindings_contract_version != scaffolding_contract_version {
        return InitializationResult.contractVersionMismatch
    }

    return InitializationResult.ok
}

private func uniffiEnsureInitialized() {
    switch initializationResult {
    case .ok:
        break
    case .contractVersionMismatch:
        fatalError("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    case .apiChecksumMismatch:
        fatalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}

// swiftlint:enable all