// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

#pragma once

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>

// The following structs are used to implement the lowest level
// of the FFI, and thus useful to multiple uniffied crates.
// We ensure they are declared exactly once, with a header guard, UNIFFI_SHARED_H.
#ifdef UNIFFI_SHARED_H
    // We also try to prevent mixing versions of shared uniffi header structs.
    // If you add anything to the #else block, you must increment the version suffix in UNIFFI_SHARED_HEADER_V4
    #ifndef UNIFFI_SHARED_HEADER_V4
        #error Combining helper code from multiple versions of uniffi is not supported
    #endif // ndef UNIFFI_SHARED_HEADER_V4
#else
#define UNIFFI_SHARED_H
#define UNIFFI_SHARED_HEADER_V4
// ⚠️ Attention: If you change this #else block (ending in `#endif // def UNIFFI_SHARED_H`) you *must* ⚠️
// ⚠️ increment the version suffix in all instances of UNIFFI_SHARED_HEADER_V4 in this file.           ⚠️

typedef struct RustBuffer
{
    int32_t capacity;
    int32_t len;
    uint8_t *_Nullable data;
} RustBuffer;

typedef int32_t (*ForeignCallback)(uint64_t, int32_t, const uint8_t *_Nonnull, int32_t, RustBuffer *_Nonnull);

// Task defined in Rust that Swift executes
typedef void (*UniFfiRustTaskCallback)(const void * _Nullable);

// Callback to execute Rust tasks using a Swift Task
//
// Args:
//   executor: ForeignExecutor lowered into a size_t value
//   delay: Delay in MS
//   task: UniFfiRustTaskCallback to call
//   task_data: data to pass the task callback
typedef void (*UniFfiForeignExecutorCallback)(size_t, uint32_t, UniFfiRustTaskCallback _Nullable, const void * _Nullable);

typedef struct ForeignBytes
{
    int32_t len;
    const uint8_t *_Nullable data;
} ForeignBytes;

// Error definitions
typedef struct RustCallStatus {
    int8_t code;
    RustBuffer errorBuf;
} RustCallStatus;

// ⚠️ Attention: If you change this #else block (ending in `#endif // def UNIFFI_SHARED_H`) you *must* ⚠️
// ⚠️ increment the version suffix in all instances of UNIFFI_SHARED_HEADER_V4 in this file.           ⚠️
#endif // def UNIFFI_SHARED_H

// Callbacks for UniFFI Futures
typedef void (*UniFfiFutureCallbackUInt8)(const void * _Nonnull, uint8_t, RustCallStatus);
typedef void (*UniFfiFutureCallbackInt8)(const void * _Nonnull, int8_t, RustCallStatus);
typedef void (*UniFfiFutureCallbackUnsafeMutableRawPointer)(const void * _Nonnull, void*_Nonnull, RustCallStatus);
typedef void (*UniFfiFutureCallbackUnsafeMutableRawPointer)(const void * _Nonnull, void*_Nonnull, RustCallStatus);
typedef void (*UniFfiFutureCallbackUnsafeMutableRawPointer)(const void * _Nonnull, void*_Nonnull, RustCallStatus);
typedef void (*UniFfiFutureCallbackUnsafeMutableRawPointer)(const void * _Nonnull, void*_Nonnull, RustCallStatus);
typedef void (*UniFfiFutureCallbackUnsafeMutableRawPointer)(const void * _Nonnull, void*_Nonnull, RustCallStatus);
typedef void (*UniFfiFutureCallbackUnsafeMutableRawPointer)(const void * _Nonnull, void*_Nonnull, RustCallStatus);
typedef void (*UniFfiFutureCallbackUnsafeMutableRawPointer)(const void * _Nonnull, void*_Nonnull, RustCallStatus);
typedef void (*UniFfiFutureCallbackUnsafeMutableRawPointer)(const void * _Nonnull, void*_Nonnull, RustCallStatus);
typedef void (*UniFfiFutureCallbackUnsafeMutableRawPointer)(const void * _Nonnull, void*_Nonnull, RustCallStatus);
typedef void (*UniFfiFutureCallbackUnsafeMutableRawPointer)(const void * _Nonnull, void*_Nonnull, RustCallStatus);
typedef void (*UniFfiFutureCallbackRustBuffer)(const void * _Nonnull, RustBuffer, RustCallStatus);
typedef void (*UniFfiFutureCallbackRustBuffer)(const void * _Nonnull, RustBuffer, RustCallStatus);
typedef void (*UniFfiFutureCallbackRustBuffer)(const void * _Nonnull, RustBuffer, RustCallStatus);
typedef void (*UniFfiFutureCallbackRustBuffer)(const void * _Nonnull, RustBuffer, RustCallStatus);
typedef void (*UniFfiFutureCallbackRustBuffer)(const void * _Nonnull, RustBuffer, RustCallStatus);
typedef void (*UniFfiFutureCallbackRustBuffer)(const void * _Nonnull, RustBuffer, RustCallStatus);
typedef void (*UniFfiFutureCallbackRustBuffer)(const void * _Nonnull, RustBuffer, RustCallStatus);
typedef void (*UniFfiFutureCallbackRustBuffer)(const void * _Nonnull, RustBuffer, RustCallStatus);
typedef void (*UniFfiFutureCallbackRustBuffer)(const void * _Nonnull, RustBuffer, RustCallStatus);
typedef void (*UniFfiFutureCallbackRustBuffer)(const void * _Nonnull, RustBuffer, RustCallStatus);

// Scaffolding functions
void uniffi_bitwarden_uniffi_fn_free_client(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
void*_Nonnull uniffi_bitwarden_uniffi_fn_constructor_client_new(RustBuffer settings, RustCallStatus *_Nonnull out_status
);
void*_Nonnull uniffi_bitwarden_uniffi_fn_method_client_auth(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
void*_Nonnull uniffi_bitwarden_uniffi_fn_method_client_crypto(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
RustBuffer uniffi_bitwarden_uniffi_fn_method_client_echo(void*_Nonnull ptr, RustBuffer msg, RustCallStatus *_Nonnull out_status
);
void*_Nonnull uniffi_bitwarden_uniffi_fn_method_client_generators(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
void*_Nonnull uniffi_bitwarden_uniffi_fn_method_client_vault(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
void uniffi_bitwarden_uniffi_fn_free_clientauth(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
void uniffi_bitwarden_uniffi_fn_method_clientauth_hash_password(void*_Nonnull ptr, RustBuffer email, RustBuffer password, RustBuffer kdf_params, size_t uniffi_executor, UniFfiFutureCallbackRustBuffer _Nonnull uniffi_callback, void* _Nonnull uniffi_callback_data, RustCallStatus *_Nonnull out_status
);
void uniffi_bitwarden_uniffi_fn_method_clientauth_make_register_keys(void*_Nonnull ptr, RustBuffer email, RustBuffer password, RustBuffer kdf, size_t uniffi_executor, UniFfiFutureCallbackRustBuffer _Nonnull uniffi_callback, void* _Nonnull uniffi_callback_data, RustCallStatus *_Nonnull out_status
);
void uniffi_bitwarden_uniffi_fn_method_clientauth_password_strength(void*_Nonnull ptr, RustBuffer password, RustBuffer email, RustBuffer additional_inputs, size_t uniffi_executor, UniFfiFutureCallbackUInt8 _Nonnull uniffi_callback, void* _Nonnull uniffi_callback_data, RustCallStatus *_Nonnull out_status
);
void uniffi_bitwarden_uniffi_fn_method_clientauth_satisfies_policy(void*_Nonnull ptr, RustBuffer password, uint8_t strength, RustBuffer policy, size_t uniffi_executor, UniFfiFutureCallbackInt8 _Nonnull uniffi_callback, void* _Nonnull uniffi_callback_data, RustCallStatus *_Nonnull out_status
);
void uniffi_bitwarden_uniffi_fn_free_clientciphers(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
void uniffi_bitwarden_uniffi_fn_method_clientciphers_decrypt(void*_Nonnull ptr, RustBuffer cipher, size_t uniffi_executor, UniFfiFutureCallbackRustBuffer _Nonnull uniffi_callback, void* _Nonnull uniffi_callback_data, RustCallStatus *_Nonnull out_status
);
void uniffi_bitwarden_uniffi_fn_method_clientciphers_decrypt_list(void*_Nonnull ptr, RustBuffer ciphers, size_t uniffi_executor, UniFfiFutureCallbackRustBuffer _Nonnull uniffi_callback, void* _Nonnull uniffi_callback_data, RustCallStatus *_Nonnull out_status
);
void uniffi_bitwarden_uniffi_fn_method_clientciphers_encrypt(void*_Nonnull ptr, RustBuffer cipher_view, size_t uniffi_executor, UniFfiFutureCallbackRustBuffer _Nonnull uniffi_callback, void* _Nonnull uniffi_callback_data, RustCallStatus *_Nonnull out_status
);
void uniffi_bitwarden_uniffi_fn_free_clientcollections(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
void uniffi_bitwarden_uniffi_fn_method_clientcollections_decrypt(void*_Nonnull ptr, RustBuffer collection, size_t uniffi_executor, UniFfiFutureCallbackRustBuffer _Nonnull uniffi_callback, void* _Nonnull uniffi_callback_data, RustCallStatus *_Nonnull out_status
);
void uniffi_bitwarden_uniffi_fn_method_clientcollections_decrypt_list(void*_Nonnull ptr, RustBuffer collections, size_t uniffi_executor, UniFfiFutureCallbackRustBuffer _Nonnull uniffi_callback, void* _Nonnull uniffi_callback_data, RustCallStatus *_Nonnull out_status
);
void uniffi_bitwarden_uniffi_fn_free_clientcrypto(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
void uniffi_bitwarden_uniffi_fn_method_clientcrypto_initialize_crypto(void*_Nonnull ptr, RustBuffer req, size_t uniffi_executor, UniFfiFutureCallbackUInt8 _Nonnull uniffi_callback, void* _Nonnull uniffi_callback_data, RustCallStatus *_Nonnull out_status
);
void uniffi_bitwarden_uniffi_fn_free_clientexporters(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
void uniffi_bitwarden_uniffi_fn_method_clientexporters_export_organization_vault(void*_Nonnull ptr, RustBuffer collections, RustBuffer ciphers, RustBuffer format, size_t uniffi_executor, UniFfiFutureCallbackRustBuffer _Nonnull uniffi_callback, void* _Nonnull uniffi_callback_data, RustCallStatus *_Nonnull out_status
);
void uniffi_bitwarden_uniffi_fn_method_clientexporters_export_vault(void*_Nonnull ptr, RustBuffer folders, RustBuffer ciphers, RustBuffer format, size_t uniffi_executor, UniFfiFutureCallbackRustBuffer _Nonnull uniffi_callback, void* _Nonnull uniffi_callback_data, RustCallStatus *_Nonnull out_status
);
void uniffi_bitwarden_uniffi_fn_free_clientfolders(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
void uniffi_bitwarden_uniffi_fn_method_clientfolders_decrypt(void*_Nonnull ptr, RustBuffer folder, size_t uniffi_executor, UniFfiFutureCallbackRustBuffer _Nonnull uniffi_callback, void* _Nonnull uniffi_callback_data, RustCallStatus *_Nonnull out_status
);
void uniffi_bitwarden_uniffi_fn_method_clientfolders_decrypt_list(void*_Nonnull ptr, RustBuffer folders, size_t uniffi_executor, UniFfiFutureCallbackRustBuffer _Nonnull uniffi_callback, void* _Nonnull uniffi_callback_data, RustCallStatus *_Nonnull out_status
);
void uniffi_bitwarden_uniffi_fn_method_clientfolders_encrypt(void*_Nonnull ptr, RustBuffer folder, size_t uniffi_executor, UniFfiFutureCallbackRustBuffer _Nonnull uniffi_callback, void* _Nonnull uniffi_callback_data, RustCallStatus *_Nonnull out_status
);
void uniffi_bitwarden_uniffi_fn_free_clientgenerators(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
void uniffi_bitwarden_uniffi_fn_method_clientgenerators_passphrase(void*_Nonnull ptr, RustBuffer settings, size_t uniffi_executor, UniFfiFutureCallbackRustBuffer _Nonnull uniffi_callback, void* _Nonnull uniffi_callback_data, RustCallStatus *_Nonnull out_status
);
void uniffi_bitwarden_uniffi_fn_method_clientgenerators_password(void*_Nonnull ptr, RustBuffer settings, size_t uniffi_executor, UniFfiFutureCallbackRustBuffer _Nonnull uniffi_callback, void* _Nonnull uniffi_callback_data, RustCallStatus *_Nonnull out_status
);
void uniffi_bitwarden_uniffi_fn_free_clientpasswordhistory(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
void uniffi_bitwarden_uniffi_fn_method_clientpasswordhistory_decrypt_list(void*_Nonnull ptr, RustBuffer list, size_t uniffi_executor, UniFfiFutureCallbackRustBuffer _Nonnull uniffi_callback, void* _Nonnull uniffi_callback_data, RustCallStatus *_Nonnull out_status
);
void uniffi_bitwarden_uniffi_fn_method_clientpasswordhistory_encrypt(void*_Nonnull ptr, RustBuffer password_history, size_t uniffi_executor, UniFfiFutureCallbackRustBuffer _Nonnull uniffi_callback, void* _Nonnull uniffi_callback_data, RustCallStatus *_Nonnull out_status
);
void uniffi_bitwarden_uniffi_fn_free_clientsends(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
void uniffi_bitwarden_uniffi_fn_method_clientsends_decrypt(void*_Nonnull ptr, RustBuffer send, size_t uniffi_executor, UniFfiFutureCallbackRustBuffer _Nonnull uniffi_callback, void* _Nonnull uniffi_callback_data, RustCallStatus *_Nonnull out_status
);
void uniffi_bitwarden_uniffi_fn_method_clientsends_decrypt_buffer(void*_Nonnull ptr, RustBuffer send, RustBuffer buffer, size_t uniffi_executor, UniFfiFutureCallbackRustBuffer _Nonnull uniffi_callback, void* _Nonnull uniffi_callback_data, RustCallStatus *_Nonnull out_status
);
void uniffi_bitwarden_uniffi_fn_method_clientsends_decrypt_file(void*_Nonnull ptr, RustBuffer send, RustBuffer encrypted_file_path, RustBuffer decrypted_file_path, size_t uniffi_executor, UniFfiFutureCallbackUInt8 _Nonnull uniffi_callback, void* _Nonnull uniffi_callback_data, RustCallStatus *_Nonnull out_status
);
void uniffi_bitwarden_uniffi_fn_method_clientsends_decrypt_list(void*_Nonnull ptr, RustBuffer sends, size_t uniffi_executor, UniFfiFutureCallbackRustBuffer _Nonnull uniffi_callback, void* _Nonnull uniffi_callback_data, RustCallStatus *_Nonnull out_status
);
void uniffi_bitwarden_uniffi_fn_method_clientsends_encrypt(void*_Nonnull ptr, RustBuffer send, size_t uniffi_executor, UniFfiFutureCallbackRustBuffer _Nonnull uniffi_callback, void* _Nonnull uniffi_callback_data, RustCallStatus *_Nonnull out_status
);
void uniffi_bitwarden_uniffi_fn_method_clientsends_encrypt_buffer(void*_Nonnull ptr, RustBuffer send, RustBuffer buffer, size_t uniffi_executor, UniFfiFutureCallbackRustBuffer _Nonnull uniffi_callback, void* _Nonnull uniffi_callback_data, RustCallStatus *_Nonnull out_status
);
void uniffi_bitwarden_uniffi_fn_method_clientsends_encrypt_file(void*_Nonnull ptr, RustBuffer send, RustBuffer decrypted_file_path, RustBuffer encrypted_file_path, size_t uniffi_executor, UniFfiFutureCallbackUInt8 _Nonnull uniffi_callback, void* _Nonnull uniffi_callback_data, RustCallStatus *_Nonnull out_status
);
void uniffi_bitwarden_uniffi_fn_free_clientvault(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
void*_Nonnull uniffi_bitwarden_uniffi_fn_method_clientvault_ciphers(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
void*_Nonnull uniffi_bitwarden_uniffi_fn_method_clientvault_collections(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
void*_Nonnull uniffi_bitwarden_uniffi_fn_method_clientvault_folders(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
void*_Nonnull uniffi_bitwarden_uniffi_fn_method_clientvault_password_history(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
void*_Nonnull uniffi_bitwarden_uniffi_fn_method_clientvault_sends(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
RustBuffer ffi_bitwarden_uniffi_rustbuffer_alloc(int32_t size, RustCallStatus *_Nonnull out_status
);
RustBuffer ffi_bitwarden_uniffi_rustbuffer_from_bytes(ForeignBytes bytes, RustCallStatus *_Nonnull out_status
);
void ffi_bitwarden_uniffi_rustbuffer_free(RustBuffer buf, RustCallStatus *_Nonnull out_status
);
RustBuffer ffi_bitwarden_uniffi_rustbuffer_reserve(RustBuffer buf, int32_t additional, RustCallStatus *_Nonnull out_status
);
uint16_t uniffi_bitwarden_uniffi_checksum_method_client_auth(void
    
);
uint16_t uniffi_bitwarden_uniffi_checksum_method_client_crypto(void
    
);
uint16_t uniffi_bitwarden_uniffi_checksum_method_client_echo(void
    
);
uint16_t uniffi_bitwarden_uniffi_checksum_method_client_generators(void
    
);
uint16_t uniffi_bitwarden_uniffi_checksum_method_client_vault(void
    
);
uint16_t uniffi_bitwarden_uniffi_checksum_method_clientauth_hash_password(void
    
);
uint16_t uniffi_bitwarden_uniffi_checksum_method_clientauth_make_register_keys(void
    
);
uint16_t uniffi_bitwarden_uniffi_checksum_method_clientauth_password_strength(void
    
);
uint16_t uniffi_bitwarden_uniffi_checksum_method_clientauth_satisfies_policy(void
    
);
uint16_t uniffi_bitwarden_uniffi_checksum_method_clientciphers_decrypt(void
    
);
uint16_t uniffi_bitwarden_uniffi_checksum_method_clientciphers_decrypt_list(void
    
);
uint16_t uniffi_bitwarden_uniffi_checksum_method_clientciphers_encrypt(void
    
);
uint16_t uniffi_bitwarden_uniffi_checksum_method_clientcollections_decrypt(void
    
);
uint16_t uniffi_bitwarden_uniffi_checksum_method_clientcollections_decrypt_list(void
    
);
uint16_t uniffi_bitwarden_uniffi_checksum_method_clientcrypto_initialize_crypto(void
    
);
uint16_t uniffi_bitwarden_uniffi_checksum_method_clientexporters_export_organization_vault(void
    
);
uint16_t uniffi_bitwarden_uniffi_checksum_method_clientexporters_export_vault(void
    
);
uint16_t uniffi_bitwarden_uniffi_checksum_method_clientfolders_decrypt(void
    
);
uint16_t uniffi_bitwarden_uniffi_checksum_method_clientfolders_decrypt_list(void
    
);
uint16_t uniffi_bitwarden_uniffi_checksum_method_clientfolders_encrypt(void
    
);
uint16_t uniffi_bitwarden_uniffi_checksum_method_clientgenerators_passphrase(void
    
);
uint16_t uniffi_bitwarden_uniffi_checksum_method_clientgenerators_password(void
    
);
uint16_t uniffi_bitwarden_uniffi_checksum_method_clientpasswordhistory_decrypt_list(void
    
);
uint16_t uniffi_bitwarden_uniffi_checksum_method_clientpasswordhistory_encrypt(void
    
);
uint16_t uniffi_bitwarden_uniffi_checksum_method_clientsends_decrypt(void
    
);
uint16_t uniffi_bitwarden_uniffi_checksum_method_clientsends_decrypt_buffer(void
    
);
uint16_t uniffi_bitwarden_uniffi_checksum_method_clientsends_decrypt_file(void
    
);
uint16_t uniffi_bitwarden_uniffi_checksum_method_clientsends_decrypt_list(void
    
);
uint16_t uniffi_bitwarden_uniffi_checksum_method_clientsends_encrypt(void
    
);
uint16_t uniffi_bitwarden_uniffi_checksum_method_clientsends_encrypt_buffer(void
    
);
uint16_t uniffi_bitwarden_uniffi_checksum_method_clientsends_encrypt_file(void
    
);
uint16_t uniffi_bitwarden_uniffi_checksum_method_clientvault_ciphers(void
    
);
uint16_t uniffi_bitwarden_uniffi_checksum_method_clientvault_collections(void
    
);
uint16_t uniffi_bitwarden_uniffi_checksum_method_clientvault_folders(void
    
);
uint16_t uniffi_bitwarden_uniffi_checksum_method_clientvault_password_history(void
    
);
uint16_t uniffi_bitwarden_uniffi_checksum_method_clientvault_sends(void
    
);
uint16_t uniffi_bitwarden_uniffi_checksum_constructor_client_new(void
    
);
void uniffi_foreign_executor_callback_set(UniFfiForeignExecutorCallback _Nonnull callback
);
uint32_t ffi_bitwarden_uniffi_uniffi_contract_version(void
    
);

